import type * as CSS from 'csstype';
import { z } from 'zod';

export interface PageInfo {
  /** the URL on which the page is served */
  url: string;

  /** path to the HTML file of the page */
  filePath: string;

  /** the probability that a visitor will access this page, must be in the range [0, 1] */
  probability: number;
}

export interface FontVariantInfo {
  /**
   * path to the original font file
   * It runs faster with ttf/otf fonts than woff/woff2 fonts.
   */
  originalFontPath: string;

  /** used in the output font file name (e.g. "NotoSerifSC-Regular") */
  outputFileName: string;

  /** font-weight in CSS */
  fontWeight: number;

  /** font-display in CSS */
  fontDisplay?: CSS.AtRule.FontDisplay;

  /** font-style in CSS */
  fontStyle?: CSS.AtRule.FontStyle;
}

export interface FontInfo {
  /**
   * full, computed font-family CSS value of elements that use this font
   *
   * Run `getComputedStyle(element).fontFamily` in Chrome (Chromium) to get the value.
   * It could be different from the value in your CSS file or in Firefox:
   * - Single quotes are changed to double quotes.
   * - Quotes without spaces in them are removed.
   * - One space after each comma, no space before each comma.
   */
  fontFamily: string;

  /** the font-family used in @font-face rules, without quotes */
  webFontName: string;

  /** variants of the same font family, e.g. different font weights */
  variants: FontVariantInfo[];
}

export interface Config {
  /** list of all pages */
  pages: PageInfo[];

  /** list of all web fonts that need to be processed */
  fonts: FontInfo[];

  /** path to the root of the website on file system */
  rootPath: string;

  /** relative path to the assets directory used for fonts generated by this tool */
  assetsPath: string;

  /**
   * whether to use the cache and keep the set of common glyphs unchanged
   * or compute a new set of common glyphs
   * The cache will not be used if font family or font weight is changed.
   */
  useCache: boolean;

  /**
   * file path to store the cache of common glyphs
   * The content is JSON so a `.json` suffix is recommended.
   */
  cachePath: string;

  /**
   * set of glyphs that are always common if used in any page at least once
   * It can be either a string containing the characters or an array of code points.
   * @default all ASCII characters
   */
  alwaysCommonGlyphs?: string | number[];

  /**
   * number of browser (puppeteer) pages to use in parallel
   * @default 4
   */
  concurrency?: number;
}

export interface PageFontInfoItem {
  fontFamily: string;
  variants: {
    fontWeight: number;
    texts: string[];
  } [];
}

export interface PageInfoWithFontInfo extends PageInfo {
  fontInfo: PageFontInfoItem[];
}

export interface PageInfoWithGlyphInfo extends PageInfo {
  glyphInfo: number[][][];
}

export interface FontInfoWithCommonGlyphs extends Omit<FontInfo, 'variants'> {
  variants: (FontVariantInfo & {
    commonGlyphs: Set<number>;
  })[];
}

export const CommonGlyphsCacheSchema = z.array(z.object({
  fontFamily: z.string(),
  fontWeight: z.number().int(),
  commonGlyphs: z.array(z.number().int()),
}));

export type CommonGlyphsCache = z.infer<typeof CommonGlyphsCacheSchema>;

export interface PageInfoWithCSS extends PageInfoWithGlyphInfo {
  css: string[];
}
